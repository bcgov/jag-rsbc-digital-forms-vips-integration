apiVersion: v1
kind: Template
labels:
  template: jenkins-slave-zap-template
message: |-
  A Jenkins server must be instantiated in this project to manage
  the Pipeline BuildConfig created by this template. You will be able to log in to
  it using your OpenShift user credentials.
metadata:
  annotations:
    openshift.io/display-name: OWASP/Zap jenkins slave template
    description: |-
      This is a template for OWASP/Zap jenkins slave.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: jenkins-slave-zap-template
parameters:
  - description: The OpenShift Namespace prefix where the ImageStreams reside.
    displayName: Namespace Prefix (Prefix for each namespace ie prefix-tools, prefix-dev etc)
    name: namespacePrefix
    required: true
    value:
  - description: Volume space available for ZAP plugins
    displayName: SonarQube Volume Capacity
    name: ZAP_PLUGIN_VOLUME_CAPACITY
    required: true
    value: 5Gi
  - name: ZAP_PLUGIN_PERSISTENT_VOLUME_CLASS
    displayName: Persistent Volume Class name
    description: The class of the volume; netapp-file-standard
    required: false
    value: netapp-file-standard
objects:
  - apiVersion: build.openshift.io/v1
    kind: BuildConfig
    metadata:
      labels:
        app: jenkins-slave-zap
      name: jenkins-slave-zap
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: "jenkins-slave-zap:latest"
      postCommit: {}
      resources: {}
      runPolicy: Serial
      source:
        contextDir: .
        git:
          ref: master
          uri: "https://github.com/emuthiah/owasp-zap-openshift.git"
        type: Git
      strategy:
        dockerStrategy:
          dockerfilePath: Dockerfile
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers: []
  - apiVersion: image.openshift.io/v1
    kind: ImageStream
    metadata:
      labels:
        app: jenkins-slave-zap
      name: jenkins-slave-zap
    spec:
      lookupPolicy:
        local: false
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      labels:
        app: jenkins-slave-zap
      name: jenkins-slave-zap-plugin
    spec:
      accessModes:
        - ReadWriteOnce
      storageClassName: ${ZAP_PLUGIN_PERSISTENT_VOLUME_CLASS}
      resources:
        requests:
          storage: "${ZAP_PLUGIN_VOLUME_CAPACITY}"
  - apiVersion: v1
    data:
      zap: |-
        <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
          <inheritFrom></inheritFrom>
          <name>zap</name>
          <instanceCap>2147483647</instanceCap>
          <idleMinutes>0</idleMinutes>
          <label>zap</label>
          <serviceAccount>jenkins</serviceAccount>
          <nodeSelector></nodeSelector>
          <volumes>
            <org.csanchez.jenkins.plugins.kubernetes.volumes.PersistentVolumeClaim>
              <mountPath>/var/lib/jenkins/plugin</mountPath>
              <claimName>jenkins-slave-zap-plugin</claimName>
              <readOnly>false</readOnly>
            </org.csanchez.jenkins.plugins.kubernetes.volumes.PersistentVolumeClaim>
          </volumes>
          <containers>
            <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
              <name>jnlp</name>
              <image>docker-registry.default.svc:5000/${namespacePrefix}-tools/jenkins-slave-zap</image>
              <privileged>false</privileged>
              <alwaysPullImage>false</alwaysPullImage>
              <workingDir>/tmp</workingDir>
              <command></command>
              <args>${computer.jnlpmac} ${computer.name}</args>
              <ttyEnabled>false</ttyEnabled>
              <resourceRequestCpu>1</resourceRequestCpu>
              <resourceRequestMemory>1Gi</resourceRequestMemory>
              <resourceLimitCpu>2</resourceLimitCpu>
              <resourceLimitMemory>4Gi</resourceLimitMemory>
              <envVars/>
            </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
          </containers>
          <envVars/>
          <annotations/>
          <imagePullSecrets/>
          <nodeProperties/>
        </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
    kind: ConfigMap
    metadata:
      labels:
        role: jenkins-slave
      name: jenkins-agent-zap
