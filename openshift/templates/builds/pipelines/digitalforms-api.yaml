apiVersion: v1
kind: Template
labels:
  template: digitalforms-api-pipeline-template
message: |-
  A Jenkins server must be instantiated in this project to manage
  the Pipeline BuildConfig created by this template. You will be able to log in to
  it using your OpenShift user credentials.
metadata:
  annotations:
    openshift.io/display-name: digitalforms-api pipeline template
    description: |-
      This is a template for digitalforms-api pipeline.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: digitalforms-api-pipeline-template
parameters:
- description: The OpenShift Namespace prefix.
  displayName: Namespace Prefix (Prefix for each namespace ie prefix-tools, prefix-dev etc)
  name: namespacePrefix
  required: true
  value:
- description: Github trigger secret. A difficult to guess string encoded as part of the webhook URL. Not encrypted.
  displayName: GitHub Webhook Secret (Generated if empty)
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: gitSecret
objects:
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      application: digitalforms-api
      template: master-build-pipeline
    name: digitalforms-api-pipeline
    namespace: ${namespacePrefix}-tools
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://github.com/bcgov/jag-rsbc-digital-forms-vips-integration
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: APP_NAME
          value: digitalforms-api
        - name: LIFECYCLE_WEBHOOK
        - name: GIT_SOURCE_URL
          value: https://github.com/bcgov/jag-rsbc-digital-forms-vips-integration.git
        - name: GIT_SOURCE_REF
          value: master
        - name: GIT_CREDENTIALS_ID
        - name: JENKINS_POD
          value: maven
        - name: SONAR_TOKEN
        - name: SONAR_CREDENTIAL_ID
        - name: SONAR_URL
          value: http://sonarqube:9000
        - name: SONAR_COMMAND
        - name: SONAR_ENABLED
          value: "false"
        - name: TOOLS_NAMESPACE
          value: ${namespacePrefix}-tools
        - name: DEV_NAMESPACE
          value: ${namespacePrefix}-dev
        - name: TEST_NAMESPACE
          value: ${namespacePrefix}-test
        - name: PROD_NAMESPACE
          value: ${namespacePrefix}-prod
        - name: ROUTE_TYPE
          value: private
        jenkinsfile: |-
          try {

            node("${JENKINS_POD}") {

              // Checkout Openshift metadata template
              stage("Checkout Templates") {
                dir("${APP_NAME}") {
                  git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}", credentialsId: "${GIT_CREDENTIALS_ID}"

                  DEPLOYMENT_CONFIG_PATH = "openshift/templates/applications/deployments/digitalforms-api.yaml"
                  ROUTE_CONFIG_PATH = "openshift/templates/applications/routes/digitalforms-api.yaml"
                  SERVICE_CONFIG_PATH = "openshift/templates/applications/services/digitalforms-api.yaml"
                  sh "echo deployment config path: ${DEPLOYMENT_CONFIG_PATH}"
                }
              }

              // Build and deploy library to nexus
              def BUILD_VIPS_CLIENT = "true"
              def BUILD_ORDS_CLIENT = "true"
              if ("${BUILD_VIPS_CLIENT}"!="false") {
                stage("Build and deploy jag-vips-client to nexus3") {
                  dir("${APP_NAME}") {
                    git url: "https://github.com/bcgov/jag-vips-client.git", branch: "${GIT_SOURCE_REF}", credentialsId: "${GIT_CREDENTIALS_ID}"
                    timeout(time: 10, unit: 'MINUTES') {
                      withCredentials([usernamePassword(credentialsId: 'totdho-tools-nexus-config', usernameVariable: 'NEXUS_ADMIN_USER', passwordVariable: 'NEXUS_ADMIN_PASSWORD')]) {
                        def retVal = sh (
                          returnStatus: true,
                          script: """
                            cd src/jag-vips-client
                            export NEXUS_URL=http://nexus:8081
                            export NEXUS_GROUP_URL=\${NEXUS_URL}/repository/digitalforms-group
                            export NEXUS_SNAPSHOTS_URL=\${NEXUS_URL}/repository/digitalforms-snapshots
                            export NEXUS_RELEASES_URL=\${NEXUS_URL}/repository/digitalforms-releases
                            mvn -Popenshift -s configuration/settings.xml -Dmaven.test.skip=true clean deploy
                            find
                          """
                        )
                        echo "Return value is: ${retVal}"
                      }
                    }
                  }
                }
              }

              if ("${BUILD_ORDS_CLIENT}"!="false") {
                stage("Build and deploy digitalforms-ords-client to nexus3") {
                  dir("${APP_NAME}") {
                    git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}", credentialsId: "${GIT_CREDENTIALS_ID}"
                    timeout(time: 10, unit: 'MINUTES') {
                      withCredentials([usernamePassword(credentialsId: 'totdho-tools-nexus-config', usernameVariable: 'NEXUS_ADMIN_USER', passwordVariable: 'NEXUS_ADMIN_PASSWORD')]) {
                        def retVal = sh (
                          returnStatus: true,
                          script: """
                            cd digitalforms-ords-client
                            export NEXUS_URL=http://nexus:8081
                            mvn -Popenshift -s configuration/settings.xml -Dmaven.test.skip=true clean deploy
                            find
                          """
                        )
                        echo "Return value is: ${retVal}"
                      }
                    }
                  }
                }
              }

              // Deploy Build Config, Build Image
              stage("Build ${APP_NAME}") {
                dir("${APP_NAME}") {
                  timeout(time: 10, unit: 'MINUTES') {
                    openshift.withCluster() {
                      openshift.withProject() {
                        def bld = openshift.startBuild(env.APP_NAME)
                        bld.untilEach {
                          return (it.object().status.phase == "Complete")
                        }
                        bld.logs('-f')
                      }
                    }
                  }
                }
              }

              if ("${SONAR_ENABLED}"!="false") {
                stage("Sonar Scan") {
                  timeout(time: 8, unit: 'MINUTES') {
                    sh "ls -a"
                    sh "${SONAR_COMMAND}"
                  }
                }
              }

              stage('Promote to DEV') {
                openshift.withCluster() {
                  sh "echo Tagging image for DEV"
                  openshift.tag("${APP_NAME}:latest", "${APP_NAME}:dev")
                }
              }

              stage("Deploy ${APP_NAME}") {
                deploy("${DEPLOYMENT_CONFIG_PATH}", "${SERVICE_CONFIG_PATH}", "${ROUTE_CONFIG_PATH}", "${APP_NAME}", "${TOOLS_NAMESPACE}", "${DEV_NAMESPACE}", "${ROUTE_TYPE}", "dev")
              }

              stage('Promotion gate') {
                script {
                  input message: 'Promote application to Test?'
                }
              }

              stage('Promote to TEST') {
                openshift.withCluster() {
                  sh "echo Tagging image for TEST"
                  openshift.tag("${APP_NAME}:latest", "${APP_NAME}:test")
                }
              }

              stage("Deploy ${APP_NAME}") {
                deploy("${DEPLOYMENT_CONFIG_PATH}", "${SERVICE_CONFIG_PATH}", "${ROUTE_CONFIG_PATH}", "${APP_NAME}", "${TOOLS_NAMESPACE}", "${TEST_NAMESPACE}", "${ROUTE_TYPE}", "test")
              }

              stage('Promotion gate') {
                script {
                  input message: 'Promote application to Prod?'
                }
              }

              stage('Promote to PROD') {
                openshift.withCluster() {
                  sh "echo Tagging image for prod"
                  openshift.tag("${APP_NAME}:latest", "${APP_NAME}:prod")
                }
              }

              stage("Deploy ${APP_NAME}") {
                deploy("${DEPLOYMENT_CONFIG_PATH}", "${SERVICE_CONFIG_PATH}", "${ROUTE_CONFIG_PATH}", "${APP_NAME}", "${TOOLS_NAMESPACE}", "${PROD_NAMESPACE}", "${ROUTE_TYPE}", "prod")
              }
            }

          } catch (err) {
            echo "in catch block"

            currentBuild.result = 'FAILURE'
            env.ERR = "${err}"
            node {
                sh "curl -XPOST '${LIFECYCLE_WEBHOOK}' -H 'Content-type: application/json' --data '{\"username\":\"The Pipe Lion\",\"icon_emoji\":\":lion_face:\",\"text\": \"${APP_NAME} Pipeline Failure - ${ERR}\"}'"
            }
            echo "Caught: ${err}"
            throw err
          }

          String getCommit() {
              return sh(script: 'git rev-parse HEAD', returnStdout: true)?.trim()
          }

          // Deploy application to environment
          def deploy(String deploymentConfigPath, String serviceConfigPath, String routeConfigPath, String appName, String sourceNamespace, String targetNamespace, String routeType, String version) {
            dir("${appName}") {

              sh "echo Creating DeploymentConfig in ${targetNamespace}"

              def dcExists
              def serviceExists
              def routeExists
              openshift.withCluster() {
                openshift.withProject("${targetNamespace}") {
                  dcExists = openshift.selector( "dc", "${appName}").exists()
                  serviceExists = openshift.selector( "service", "${appName}").exists()
                  routeExists = openshift.selector( "route", "${appName}").exists()
                }
              }

              if(dcExists){
                sh "echo ${appName} Deployment Configuration Exists in ${targetNamespace}, skipping baseline template deploy"
              }else{
                sh "echo ${appName} Deployment Configuration not found in ${targetNamespace}, performing baseline template deploy"
                // deploy generic deploymentconfig
                sh "oc process -f ${deploymentConfigPath} \
                  -p namespacePrefix=${namespacePrefix} \
                  -p TAG=${version} | oc apply -f - -n ${targetNamespace}"
              }

              if(serviceExists){
                sh "echo ${appName} Service Configuration Exists in ${targetNamespace}, skipping baseline template deploy"
              }else{
                sh "echo ${appName} Service Configuration not found in ${targetNamespace}, performing baseline template deploy"
                // deploy generic Service
                sh "oc process -f ${serviceConfigPath} | oc apply -f - -n ${targetNamespace}"
              }

              if(routeExists){
                sh "echo ${appName} Route Configuration Exists in ${targetNamespace}, skipping baseline template deploy"
              }else{
                sh "echo ${appName} Route Configuration not found in ${targetNamespace}, performing baseline template deploy"
                // deploy generic Route
                sh "oc process -f ${routeConfigPath} \
                  -p namespacePrefix=${namespacePrefix} \
                  -p TAG=${version} | oc apply -f - -n ${targetNamespace}"
              }

              sh "echo Wait for service to be up"

              timeout(time: 180, unit: 'SECONDS') {
                openshift.withCluster() {
                  openshift.withProject("${targetNamespace}") {
                    def dc = openshift.selector('dc', "${appName}")
                    // this will wait until the desired replicas are available
                    dc.rollout().status()
                  }
                }
              }
            }
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - type: ConfigChange
    - github:
        secret: ${gitSecret}
      type: GitHub
