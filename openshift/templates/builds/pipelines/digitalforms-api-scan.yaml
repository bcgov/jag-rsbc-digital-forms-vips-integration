apiVersion: v1
kind: Template
labels:
  template: digitalforms-api-scans-pipeline-template
message: |-
  A Jenkins server must be instantiated in this project to manage
  the Pipeline BuildConfig created by this template. You will be able to log in to
  it using your OpenShift user credentials.
metadata:
  annotations:
    openshift.io/display-name: digitalforms-api scans pipeline template
    description: |-
      This is a template for digitalforms-api scans pipeline.
    iconClass: icon-jenkins
    tags: instant-app,jenkins
  name: digitalforms-api-scans-pipeline-template
parameters:
- description: The OpenShift Namespace prefix.
  displayName: Namespace Prefix (Prefix for each namespace ie prefix-tools, prefix-dev etc)
  name: namespacePrefix
  required: true
  value:
- description: Github trigger secret. A difficult to guess string encoded as part of the webhook URL. Not encrypted.
  displayName: GitHub Webhook Secret (Generated if empty)
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: gitSecret
- description: API definition, url pointing to swagger.json
  displayName: API definition URL
  name: apiDefinitionUrl
  required: true
  value: set.api.swagger.json
- description: Sonarqube Raw Token
  displayName: Sonarqube Token
  name: sonartoken
  required: true
  value:
objects:
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      application: digitalforms-api
      template: master-build-pipeline
    name: digitalforms-api-scans-pipeline
    namespace: ${namespacePrefix}-tools
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: {}
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: master
        uri: https://github.com/bcgov/jag-rsbc-digital-forms-vips-integration
      type: Git
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: APP_NAME
          value: digitalforms-api
        - name: API_DEFINITION_URL
          value: ${apiDefinitionUrl}
        - name: LIFECYCLE_WEBHOOK
        - name: GIT_SOURCE_URL
          value: https://github.com/bcgov/jag-rsbc-digital-forms-vips-integration
        - name: GIT_SOURCE_REF
          value: master
        - name: GIT_CREDENTIALS_ID
          value:
        - name: SONAR_TOKEN
          value: ${sonartoken}
        - name: SONAR_PROJECT_KEY
          value: digitalforms_api
        - name: SONAR_URL
          value: http://sonarqube:9000
        - name: SONAR_COMMAND
        - name: SONAR_ENABLED
          value: "true"
        - name: TOOLS_NAMESPACE
          value: ${namespacePrefix}-tools
        - name: DEV_NAMESPACE
          value: ${namespacePrefix}-dev
        - name: TEST_NAMESPACE
          value: ${namespacePrefix}-test
        - name: PROD_NAMESPACE
          value: ${namespacePrefix}-prod
        jenkinsfile: |-
          try {
            // The API format; either openapi or soap
            def API_FORMAT = 'openapi'
            // The name  of the ZAP report
            def ZAP_REPORT_NAME = "zap-report.xml"
            // The location of the ZAP reports
            def ZAP_REPORT_PATH = "/zap/wrk/${ZAP_REPORT_NAME}"
            // The name of the "stash" containing the ZAP report
            def ZAP_REPORT_STASH = "zap-report"

            def ZAP_ENABLED = "false"
            def SONAR_ENABLED = "false"
            def BDT_ENABLED = "true"

            // BDT/Cucumber testing framwork
            if ("${BDT_ENABLED}"!="false") {
              node("maven35") {
                stage('Behavior Driven Testing') {
                  timeout(time: 60, unit: 'MINUTES') {
                    dir('bdt') {
                      git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}", credentialsId: "${GIT_CREDENTIALS_ID}"
                      withCredentials([usernamePassword(credentialsId: 'totdho-tools-nexus-config', usernameVariable: 'NEXUS_ADMIN_USER', passwordVariable: 'NEXUS_ADMIN_PASSWORD')]) {
                        withCredentials([file(credentialsId: 'totdho-tools-cucumber-maven-config', variable: 'CONFIG_PROPERTIES')]) {
                          def retVal = sh (
                            returnStatus: true,
                            script: """
                              # Nexus repository
                              export NEXUS_URL=http://nexus:8081

                              . \$CONFIG_PROPERTIES

                              cd test-automation
                              mvn -Popenshift -s ../configuration/settings.xml clean
                              mvn -Popenshift -s ../configuration/settings.xml compile
                              mvn -Popenshift -s ../configuration/settings.xml test || echo "continuing..."
                            """
                          )
                        }
                      }

                      // Copy the report into the Jenkins working directory so the Jenkins tools can access it.
                      sh (
                        returnStdout: true,
                        script: "mkdir -p ./wrk/ && cp ./test-automation/test-output/htmlReport/ExtentHtml.html ./wrk/"
                      )
                    }
                  }
                  // Stash the report for publishing in a different stage (which will run on a different pod).
                  echo "Stash the report for the publishing stage ..."
                  stash name: "BDT_REPORTS", includes: "bdt/wrk/*.html"
                }
              }
              node("base") {
                stage('Publish reports') {
                  timeout(time: 60, unit: 'MINUTES') {
                    echo "Preparing the report for the publishing ..."
                    unstash name: "BDT_REPORTS"

                    def retVal = sh (
                      returnStatus: true,
                      script: """
                        # find
                        export DATE_STAMP=\$(date +%Y-%m-%d-%H-%M-%S)
                        sed -ri "s/http:/https:/g" bdt/wrk/ExtentHtml.html
                        [ -d "/var/www/html/reports/bdt/" ] || mkdir -p /var/www/html/reports/cucumber
                        mv bdt/wrk/ExtentHtml.html /var/www/html/reports/cucumber/\${DATE_STAMP}-ExtentHtml.html
                        cd /var/www/html/reports/cucumber/
                        rm -f 0000-00-00-00-00-00-ExtentHtml.html
                        ln -s \${DATE_STAMP}-ExtentHtml.html 0000-00-00-00-00-00-ExtentHtml.html
                      """
                    )
                  }
                }
              }
            }

            if ("${ZAP_ENABLED}"!="false") {
              node("zap") {
                stage('ZAP Security Scan') {
                  timeout(time: 60, unit: 'MINUTES') {

                    dir('zap') {
                      git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}", credentialsId: "${GIT_CREDENTIALS_ID}"
                      def retVal = sh (
                        returnStatus: true,
                        script: """
                          mkdir -p /zap/wrk/
                          mv zap/options.conf /zap/wrk/options.conf
                          mv zap/default.context /zap/wrk/default.context

                          cp -r /var/lib/jenkins/.ZAP/policies /var/lib/jenkins/

                          zap-api-scan.py -t "${API_DEFINITION_URL}" \
                            -f openapi \
                            -d \
                            -x ${ZAP_REPORT_NAME} \
                            -r ${APP_NAME}-zap-report.html \
                            -z "-configfile /zap/wrk/options.conf -d /var/lib/jenkins" \
                            -n /zap/wrk/default.context
                        """
                      )
                      echo "Return value is: ${retVal}"

                      // Copy the ZAP report into the Jenkins working directory so the Jenkins tools can access it.
                      sh (
                        returnStdout: true,
                        script: "mkdir -p ./wrk/ && cp ${ZAP_REPORT_PATH} ./wrk/"
                      )
                    }

                    // Stash the ZAP report for publishing in a different stage (which will run on a different pod).
                    echo "Stash the report for the publishing stage ..."
                    stash name: "${ZAP_REPORT_STASH}", includes: "zap/wrk/*.xml"
                  }
                }
              }
              node("base") {
                stage('Publish reports') {
                  timeout(time: 60, unit: 'MINUTES') {
                    echo "Preparing the report for the publishing ..."
                    unstash name: "ZAP_REPORTS"

                    def retVal = sh (
                      returnStatus: true,
                      script: """
                        # find
                        export DATE_STAMP=\$(date +%Y-%m-%d-%H-%M-%S)
                        sed -ri "s/http:/https:/g" zap/wrk/${APP_NAME}-zap-report.html
                        [ -d "/var/www/html/reports/zap/" ] || mkdir -p /var/www/html/reports/zap
                        mv zap/wrk/${APP_NAME}-zap-report.html /var/www/html/reports/zap/\${DATE_STAMP}-${APP_NAME}-zap-report.html
                        cd /var/www/html/reports/zap/
                        rm -f 0000-00-00-00-00-00-${APP_NAME}-zap-report.html
                        ln -s \${DATE_STAMP}-${APP_NAME}-zap-report.html 0000-00-00-00-00-00-${APP_NAME}-zap-report.html
                      """
                    )
                  }
                }
              }
            }

            if ("${SONAR_ENABLED}"!="false") {
              node("maven35") {
                stage("Sonar Scan") {
                  timeout(time: 10, unit: 'MINUTES') {

                    dir("${APP_NAME}") {
                      git url: "${GIT_SOURCE_URL}", branch: "${GIT_SOURCE_REF}", credentialsId: "${GIT_CREDENTIALS_ID}"
                      env.GIT_COMMIT = getCommit()

                      echo "Preparing the report for the publishing ..."
                      unstash name: "${ZAP_REPORT_STASH}"
                      withCredentials([usernamePassword(credentialsId: '${namespacePrefix}-tools-nexus-config', usernameVariable: 'NEXUS_ADMIN_USER', passwordVariable: 'NEXUS_ADMIN_PASSWORD')]) {
                        def retVal = sh (
                          returnStatus: true,
                          script: """
                            export NEXUS_URL=http://nexus:8081
                            mvn -Popenshift -s configuration/settings.xml \
                               clean verify sonar:sonar \
                              -Dsonar.scm.provider=git \
                              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                              -Dsonar.host.url=${SONAR_URL} \
                              -Dsonar.login=${SONAR_TOKEN} \
                              -Dsonar.zaproxy.reportPath=${WORKSPACE}/${APP_NAME}${ZAP_REPORT_PATH} \
                              -Dsonar.language=java
                          """
                        )
                        echo "Return value is: ${retVal}"
                      }
                    }
                  }
                }
              }
            }
          } catch (err) {
            echo "in catch block"

            currentBuild.result = 'FAILURE'
            env.ERR = "${err}"
            node {
                sh "curl -XPOST '${LIFECYCLE_WEBHOOK}' -H 'Content-type: application/json' --data '{\"username\":\"The Pipe Lion\",\"icon_emoji\":\":lion_face:\",\"text\": \"${APP_NAME} Pipeline Failure - ${ERR}\"}'"
            }
            echo "Caught: ${err}"
            throw err
          }

          String getCommit() {
              return sh(script: 'git rev-parse HEAD', returnStdout: true)?.trim()
          }
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - type: ConfigChange
    - github:
        secret: ${gitSecret}
      type: GitHub
